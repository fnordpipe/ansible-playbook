# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *

c = BuildmasterConfig = {}

c['title'] = "{{ buildConfig['title'] }}"
c['titleURL'] = "{{ buildConfig['titleUrl'] }}"
c['buildbotURL'] = "{{ buildConfig['buildbotUrl'] }}"

c['slaves'] = [
{% if groups['buildmaster-' + inventory_hostname] is defined %}
{% for slave in groups['buildmaster-' + inventory_hostname ] %}
  buildslave.BuildSlave("{{ hostvars[slave]['buildConfig']['name'] }}", "{{ hostvars[slave]['buildConfig']['password'] }}"),
{% endfor %}
{% endif %}
  ]

c['protocols'] = {'pb': {'port': 9989}}

c['change_source'] = []
c['schedulers'] = []
c['builders'] = []

{% if buildConfig['poller'] is defined %}
{% for poller in buildConfig['poller'] %}
c['change_source'].append(changes.GitPoller(
  project = '{{ poller['project'] }}',
  repourl = '{{ poller['url']}}',
  branch = '{{ poller['branch'] }}',
  workdir = 'gitpoller-{{ poller['workdir'] }}',
  pollinterval = {{ poller['interval'] }}))
{% endfor %}
{% endif %}

{% if buildConfig['scheduler'] is defined %}
{% for scheduler in buildConfig['scheduler'] %}
c['schedulers'].append({{ scheduler['type'] }}(
  name = '{{ scheduler['name'] }}',
  change_filter = util.ChangeFilter(project = '{{ scheduler['project'] }}', branch = '{{ scheduler['branch'] }}'),
  branch = '{{ scheduler['branch'] }}',
  builderNames = ['{{ scheduler['builder'] }}'],
  hour = {{ scheduler['hour'] }}, minute = {{ scheduler['minute'] }}))
{% endfor %}
{% endif %}

{% if buildConfig['factory'] is defined %}
{% for factory in buildConfig['factory'] %}
factory_{{ factory['name'] }} = util.BuildFactory()

{% if factory['steps']['git'] is defined %}
{% for step in factory['steps']['git'] %}
factory_{{ factory['name'] }}.addStep(steps.Git(
  name = '{{ step['name'] }}',
  repourl = '{{ step['url'] }}',
  workdir = util.Interpolate('work/{{ factory['name'] }}/%(prop:buildnumber)s/{{ step['workdir'] | default('') }}'),
  mode = '{{ step['mode'] | default('incremental') }}',
  alwaysUseLatest = {{ step['alwaysUseLatest'] | default('False') }},
  haltOnFailure = {{ step['haltOnFailure'] | default('True') }}
  ))
{% endfor %}
{% endif %}

{% if factory['steps']['shell'] is defined %}
{% for step in factory['steps']['shell'] %}
factory_{{ factory['name'] }}.addStep(steps.ShellCommand(
  name = '{{ step['name'] }}',
  env = {'BUILDNUMBER': util.Interpolate('%(prop:buildnumber)s')},
  command = ['{{ step['command'] | regex_replace(' ', "', '") }}'],
  workdir = util.Interpolate('work/{{ factory['name'] }}/%(prop:buildnumber)s/{{ step['workdir'] | default('') }}'),
  timeout = {{ step['timeout'] | default('None') }},
  haltOnFailure = {{ step['haltOnFailure'] | default('True') }},
  alwaysRun = {{ step['alwaysRun'] | default('False') }}
  ))

{% endfor %}
{% endif %}

{% if factory['builder'] is defined %}
c['builders'].append(util.BuilderConfig(
  name = '{{ factory['builder']['name'] }}',
  slavenames = [
{% for slave in factory['builder']['slaves'] %}
    '{{ slave }}',
{% endfor %}
  ],
  factory = factory_{{ factory['name'] }}))
{% endif %}

{% endfor %}
{% endif %}

# STATUS TARGETS

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg = authz.Authz(
  auth = auth.BasicAuth([("fnordpipe", "fnordpipe")]),
  gracefulShutdown = False,
  forceBuild = 'auth', # use this to test your slave once it is set up
  forceAllBuilds = 'auth',  # ..or this
  pingBuilder = False,
  stopBuild = False,
  stopAllBuilds = False,
  cancelPendingBuild = False)
c['status'].append(html.WebStatus(http_port = 8010, authz = authz_cfg))

# database

c['db'] = {
  'db_url' : "sqlite:///state.sqlite",
}
